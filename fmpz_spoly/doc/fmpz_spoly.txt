/*=============================================================================

    This file is part of FLINT.

    FLINT is free software you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation either version 2 of the License, or
    (at your option) any later version.
     
    FLINT is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with FLINT if not, write to the Free Software
    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301 USA

=============================================================================*/
/******************************************************************************

    Authored 2016 by Daniel S. Roche US Government work in the public domain. 
    Authored 2016 by A. Whitman Groves US Government work in the public domain. 

******************************************************************************/

*******************************************************************************

    Memory management

*******************************************************************************

void fmpz_spoly_init(fmpz_spoly_t poly)

    Initializes a \code{poly} for use, setting it to zero.
    A corresponding call to\\ \code{fmpz_spoly_clear()} must be
    made later in order to free the memory used by the polynomial.

void fmpz_spoly_init2(fmpz_spoly_t poly, slong alloc)

    Initializes a \code{poly} with space for at least \code{alloc}
    terms and sets the length to zero. The allocated coefficients are
    all set to zero.

void fmpz_spoly_realloc(fmpz_spoly_t poly, slong alloc)

void fmpz_spoly_clear(fmpz_spoly_t poly)

    Clears the given \code{poly}, releasing any memory used. It must be
    reinitialized in order to be used again.

void _fmpz_spoly_normalise(fmpz_spoly_t poly)

    Set the length of \code{poly} so that the terms are sorted in
    decreasing order by their exponent. If all coefficients are zero,
    the length is set to zero. This function is mainly used internally,
    as all functions guarantee normalization.

void _fmpz_spoly_reserve(fmpz_spoly_t poly, slong terms)

    Allocates memory for \code{terms} coefficients and exponents of \code{poly}.

void _fmpz_spoly_set_length(fmpz_spoly_t poly, slong newlen)

    Sets length of \code{poly} to \code{newlen}.

*******************************************************************************

    Polynomial parameters

*******************************************************************************

slong fmpz_spoly_terms(const fmpz_spoly_t poly)

    Returns the number of terms in \code{poly}.

const fmpz * fmpz_spoly_degree_ptr(const fmpz_spoly_t poly)

void fmpz_spoly_degree(fmpz_t res, const fmpz_spoly_t poly)

    Sets \code{res} to the degree of \code{poly}, which is the exponent
    of its first term.

slong fmpz_spoly_degree_si(const fmpz_spoly_t poly)

    Returns the degree of \code{poly}.

void fmpz_spoly_lowdeg(fmpz_t res, const fmpz_spoly_t poly)

slong fmpz_spoly_lowdeg_si(const fmpz_spoly_t poly)

int fmpz_spoly_is_poly(const fmpz_spoly_t poly)

*******************************************************************************

    Assignment and basic manipulation

*******************************************************************************

void fmpz_spoly_zero(fmpz_spoly_t poly)

    Sets \code{poly} to the zero polynomial.

void fmpz_spoly_one(fmpz_spoly_t poly)

    Sets \code{poly} to the constant polynomial one.

void fmpz_spoly_set(fmpz_spoly_t poly1, 
    const fmpz_spoly_t poly2)

    Sets \code{poly1} to equal \code{poly2}

void fmpz_spoly_set_fmpz_fmpz(fmpz_spoly_t poly, 
    const fmpz_t coeff, const fmpz_t expon)

void fmpz_spoly_set_fmpz_si(fmpz_spoly_t poly, 
    const fmpz_t coeff, slong expon)

void fmpz_spoly_set_si_fmpz(fmpz_spoly_t poly, 
    slong coeff, const fmpz_t expon)

void fmpz_spoly_set_si_si(fmpz_spoly_t poly, 
    slong coeff, slong expon)

void fmpz_spoly_set_fmpz_poly(fmpz_spoly_t poly1, 
    const fmpz_poly_t poly2)

void fmpz_spoly_get_fmpz_poly(fmpz_poly_t out, 
    const fmpz_spoly_t in)

int fmpz_spoly_set_str(fmpz_spoly_t poly, const char * str)

char * fmpz_spoly_get_str(const fmpz_spoly_t poly)

char * fmpz_spoly_get_str_pretty(const fmpz_spoly_t poly, const char * x)

void fmpz_spoly_swap(fmpz_spoly_t poly1, fmpz_spoly_t poly2)

    Swaps \code{poly1} and \code{poly2}. This is done efficiently
    without copying data by swapping pointers, etc.

void fmpz_spoly_truncate(fmpz_spoly_t poly, const fmpz_t deg)

void fmpz_spoly_set_trunc(fmpz_spoly_t res, 
    const fmpz_spoly_t poly, const fmpz_t deg)

void fmpz_spoly_set_trunc_fmpz_poly(fmpz_poly_t res, 
    const fmpz_spoly_t poly, slong deg)

*******************************************************************************

    Randomisation

*******************************************************************************

void fmpz_spoly_randtest(fmpz_spoly_t res, flint_rand_t state, 
     slong terms, const fmpz_t degree, mp_bitcnt_t bits)

void fmpz_spoly_laurent_randtest(fmpz_spoly_t res, flint_rand_t state,
     slong terms, const fmpz_t degree, mp_bitcnt_t bits)

void fmpz_spoly_new_randtest(fmpz_spoly_t res, flint_rand_t state, 
     slong terms, const fmpz_t degree, mp_bitcnt_t bits)

void fmpz_spoly_randtest_unsigned(fmpz_spoly_t res, 
    flint_rand_t state, slong terms, const fmpz_t degree, mp_bitcnt_t bits)

void fmpz_spoly_randtest_not_zero(fmpz_spoly_t res, 
    flint_rand_t state, slong terms, const fmpz_t degree, mp_bitcnt_t bits)

*******************************************************************************

    Getting and setting coefficients

*******************************************************************************

slong fmpz_spoly_get_coeff_si_si(const fmpz_spoly_t poly, 
    slong e)

slong fmpz_spoly_get_coeff_si_fmpz(const fmpz_spoly_t poly, 
    const fmpz_t e)

void fmpz_spoly_get_coeff_fmpz_si(fmpz_t res,
    const fmpz_spoly_t poly, slong e)

void fmpz_spoly_get_coeff(fmpz_t res,
    const fmpz_spoly_t poly, const fmpz_t e)

void fmpz_spoly_set_coeff_si_fmpz(fmpz_spoly_t poly, 
    slong c, const fmpz_t e)

void fmpz_spoly_set_coeff_fmpz_si(fmpz_spoly_t poly, 
    const fmpz_t c, slong e)

void fmpz_spoly_set_coeff(fmpz_spoly_t poly, 
    const fmpz_t c, const fmpz_t e)

void fmpz_spoly_set_coeff_si_si(fmpz_spoly_t poly, 
    slong c, slong e)

fmpz* fmpz_spoly_get_coeff_ptr(fmpz_spoly_t poly, const fmpz_t e)

fmpz* fmpz_spoly_get_coeff_ptr_si(fmpz_spoly_t poly, slong e)

void fmpz_spoly_get_term(fmpz_t coeff, fmpz_t expon, 
    const fmpz_spoly_t poly, slong i)

void fmpz_spoly_get_term_coeff(fmpz_t res, const fmpz_spoly_t poly, slong i)

void fmpz_spoly_get_term_expon(fmpz_t res, const fmpz_spoly_t poly, slong i)

fmpz* fmpz_spoly_get_term_coeff_ptr(const fmpz_spoly_t poly, slong i)

fmpz* fmpz_spoly_get_term_expon_ptr(const fmpz_spoly_t poly, slong i)

slong fmpz_spoly_get_term_coeff_si(const fmpz_spoly_t poly, slong i)

slong fmpz_spoly_get_term_expon_si(const fmpz_spoly_t poly, slong i)

slong _fmpz_spoly_index(const fmpz_spoly_t poly, const fmpz_t e)

*******************************************************************************

    Comparison

*******************************************************************************

int fmpz_spoly_equal(const fmpz_spoly_t poly1, const fmpz_spoly_t poly2)

int fmpz_spoly_equal_trunc(const fmpz_spoly_t poly1, 
    const fmpz_spoly_t poly2, const fmpz_t n)

int fmpz_spoly_is_zero(const fmpz_spoly_t poly)

int fmpz_spoly_is_unit(const fmpz_spoly_t poly)

int fmpz_spoly_is_term(const fmpz_spoly_t poly, 
    const fmpz_t c, const fmpz_t e)

int fmpz_spoly_is_term_fmpz_si(const fmpz_spoly_t poly, 
    const fmpz_t c, slong e)

int fmpz_spoly_is_term_si_fmpz(const fmpz_spoly_t poly, 
    slong c, const fmpz_t e)

int fmpz_spoly_is_term_si_si(const fmpz_spoly_t poly, slong c, slong e)

int fmpz_spoly_equal_fmpz(const fmpz_spoly_t poly, const fmpz_t c)

int fmpz_spoly_equal_fmpz_poly(const fmpz_spoly_t spoly, 
    const fmpz_poly_t dpoly)

*******************************************************************************

    Addition and subtraction

*******************************************************************************

void _fmpz_spoly_add(fmpz * res_c, fmpz * res_e, slong * res_len, 
    const fmpz * poly1_c, const fmpz * poly1_e, slong len1, const fmpz * poly2_c, 
    const fmpz * poly2_e, slong len2)

void fmpz_spoly_add(fmpz_spoly_t res,
    const fmpz_spoly_t poly1, const fmpz_spoly_t poly2)

void _fmpz_spoly_sub(fmpz * res_c, fmpz * res_e, slong * res_len,
    const fmpz * poly1_c, const fmpz * poly1_e, slong len1, const fmpz * poly2_c,
    const fmpz * poly2_e, slong len2)

void fmpz_spoly_sub(fmpz_spoly_t res,
    const fmpz_spoly_t poly1, const fmpz_spoly_t poly2)

void fmpz_spoly_neg(fmpz_spoly_t res, const fmpz_spoly_t poly)

*******************************************************************************

    Scalar multiplication and division

*******************************************************************************

void fmpz_spoly_scalar_mul_ui(fmpz_spoly_t res,
        const fmpz_spoly_t poly, ulong c)

void fmpz_spoly_scalar_mul_si(fmpz_spoly_t res,
    const fmpz_spoly_t poly, slong c)

void fmpz_spoly_scalar_mul(fmpz_spoly_t res,
    const fmpz_spoly_t poly, const fmpz_t c)

void fmpz_spoly_scalar_addmul(fmpz_spoly_t poly1,
    const fmpz_spoly_t poly2, const fmpz_t c)

void fmpz_spoly_scalar_submul(fmpz_spoly_t poly1,
    const fmpz_spoly_t poly2, const fmpz_t c)

void fmpz_spoly_scalar_fdiv_si(fmpz_spoly_t res,
    const fmpz_spoly_t poly, slong c)

void fmpz_spoly_scalar_fdiv(fmpz_spoly_t res,
    const fmpz_spoly_t poly, const fmpz_t c)

void fmpz_spoly_scalar_tdiv_si(fmpz_spoly_t res,
    const fmpz_spoly_t poly, slong c)

void fmpz_spoly_scalar_tdiv(fmpz_spoly_t res,
    const fmpz_spoly_t poly, const fmpz_t c)

void fmpz_spoly_scalar_mul_2exp(fmpz_spoly_t res,
    const fmpz_spoly_t poly, ulong exp)

void fmpz_spoly_scalar_fdiv_2exp(fmpz_spoly_t res,
    const fmpz_spoly_t poly, ulong exp)

void fmpz_spoly_scalar_tdiv_2exp(fmpz_spoly_t res,
    const fmpz_spoly_t poly, ulong exp)

void fmpz_spoly_scalar_mod(fmpz_spoly_t res,
    const fmpz_spoly_t poly, const fmpz_t c)

void fmpz_spoly_scalar_smod(fmpz_spoly_t res,
    const fmpz_spoly_t poly, const fmpz_t c)

*******************************************************************************

    Bit packing

*******************************************************************************

void fmpz_spoly_bit_pack(fmpz_t res,
    const fmpz_spoly_t poly, mp_bitcnt_t bit_size)

void fmpz_spoly_bit_unpack(fmpz_spoly_t res,
    const fmpz_t f, mp_bitcnt_t bit_size)

*******************************************************************************

    Multiplication

*******************************************************************************

void fmpz_spoly_new_mul_classical(fmpz_spoly_t res,
        const fmpz_spoly_t poly1, const fmpz_spoly_t poly2)

void fmpz_spoly_mul_heaps(fmpz_spoly_t res,
    const fmpz_spoly_t poly1, const fmpz_spoly_t poly2)

void fmpz_spoly_mul_OS(fmpz_spoly_t res, flint_rand_t state, 
    const fmpz_spoly_t poly1, const fmpz_spoly_t poly2)

void fmpz_spoly_mul_interp(fmpz_spoly_t res, flint_rand_t state, 
    const fmpz_spoly_t poly1, const fmpz_spoly_t poly2, slong terms)

void fmpz_spoly_mul_classical(fmpz_spoly_t res,
    const fmpz_spoly_t poly1, const fmpz_spoly_t poly2)

void fmpz_spoly_mul(fmpz_spoly_t res,
    const fmpz_spoly_t poly1, const fmpz_spoly_t poly2)

void fmpz_spoly_sqr(fmpz_spoly_t res, const fmpz_spoly_t poly)

void _fmpz_spoly_mul_coeffs(fmpz_spoly_t res, flint_rand_t state, 
    const fmpz_spoly_t poly1, const fmpz_spoly_t poly2, const fmpz * expons,
    slong len)

*******************************************************************************

    Powering

*******************************************************************************

void fmpz_spoly_pow_recurrence(fmpz_spoly_t res,
    const fmpz_spoly_t poly, ulong e)

void fmpz_spoly_pow_binomial(fmpz_spoly_t res,
    const fmpz_spoly_t poly, ulong e)

void fmpz_spoly_pow_binexp(fmpz_spoly_t res,
    const fmpz_spoly_t poly, ulong e)

void fmpz_spoly_pow(fmpz_spoly_t res,
    const fmpz_spoly_t poly, ulong e)

void fmpz_spoly_pow_trunc(fmpz_spoly_t res,
    const fmpz_spoly_t poly, ulong e, const fmpz_t n)

*******************************************************************************

    Shifting

*******************************************************************************

void fmpz_spoly_shift_left(fmpz_spoly_t res,
    const fmpz_spoly_t poly, const fmpz_t n)

void fmpz_spoly_shift_left_si(fmpz_spoly_t res,
    const fmpz_spoly_t poly, slong n)

void fmpz_spoly_shift_right(fmpz_spoly_t res,
    const fmpz_spoly_t poly, const fmpz_t n, int trunc_poly)

void fmpz_spoly_shift_right_si(fmpz_spoly_t res,
    const fmpz_spoly_t poly, slong n, int trunc_poly)

void _fmpz_spoly_vec_shift(fmpz_spoly_t poly, 
    slong start, slong end, slong dist)

void _fmpz_spoly_append_si(fmpz_spoly_t poly1, 
    const fmpz_spoly_t poly2, slong c, ulong e)

void _fmpz_spoly_append(fmpz_spoly_t poly1, 
    const fmpz_spoly_t poly2, const fmpz_t c, const fmpz_t e)

*******************************************************************************

    Monomial multiplication and division

*******************************************************************************

void fmpz_spoly_mon_mul_si_si(fmpz_spoly_t res,
    const fmpz_spoly_t poly, slong c, slong e)

void fmpz_spoly_mon_mul_si_fmpz(fmpz_spoly_t res,
    const fmpz_spoly_t poly, slong c, const fmpz_t e)

void fmpz_spoly_mon_mul_fmpz_si(fmpz_spoly_t res,
    const fmpz_spoly_t poly, const fmpz_t c, slong e)

void fmpz_spoly_mon_mul_fmpz_fmpz(fmpz_spoly_t res,
    const fmpz_spoly_t poly, const fmpz_t c, const fmpz_t e)

void fmpz_spoly_mon_fdiv_si_si(fmpz_spoly_t res,
    const fmpz_spoly_t poly, slong c, slong e)

void fmpz_spoly_mon_fdiv_si_fmpz(fmpz_spoly_t res,
    const fmpz_spoly_t poly, slong c, const fmpz_t e)

void fmpz_spoly_mon_fdiv_fmpz_si(fmpz_spoly_t res,
    const fmpz_spoly_t poly, const fmpz_t c, slong e)

void fmpz_spoly_mon_fdiv_fmpz_fmpz(fmpz_spoly_t res,
    const fmpz_spoly_t poly, const fmpz_t c, const fmpz_t e)

*******************************************************************************

    Norms

*******************************************************************************

void fmpz_spoly_2norm(fmpz_t res, const fmpz_spoly_t poly)

ulong fmpz_spoly_max_limbs(const fmpz_spoly_t poly)

slong fmpz_spoly_max_bits(const fmpz_spoly_t poly)

slong fmpz_spoly_max_ebits(const fmpz_spoly_t poly)

ulong fmpz_spoly_max_elimbs(const fmpz_spoly_t poly)

void fmpz_spoly_height(fmpz_t res, const fmpz_spoly_t poly)

*******************************************************************************

    Euclidean division

*******************************************************************************

void fmpz_spoly_divrem(fmpz_spoly_t Q, fmpz_spoly_t R,
    const fmpz_spoly_t A, const fmpz_spoly_t B)

void fmpz_spoly_div(fmpz_spoly_t Q, 
    const fmpz_spoly_t A, const fmpz_spoly_t B)

void fmpz_spoly_rem(fmpz_spoly_t R, fmpz_spoly_t A, fmpz_spoly_t B)

void fmpz_spoly_divrem_dense(fmpz_spoly_t Q, fmpz_poly_t R,
    const fmpz_spoly_t A, const fmpz_poly_t B)

void fmpz_spoly_div_dense(fmpz_spoly_t Q, fmpz_spoly_t A, fmpz_poly_t B)

void fmpz_spoly_rem_dense(fmpz_poly_t R, fmpz_spoly_t A, fmpz_poly_t B)

void fmpz_spoly_rem_cyc(fmpz_spoly_t res, const fmpz_spoly_t poly, const fmpz_t e)

void fmpz_spoly_rem_cyc_dense(fmpz_poly_t res,
    const fmpz_spoly_t poly, ulong e)

void fmpz_spoly_rem_cyc_nmod(nmod_poly_t res,
    const fmpz_spoly_t poly, ulong e, ulong q)

void fmpz_spoly_rem_cyc_mod_diverse(nmod_poly_t res,
    const fmpz_spoly_t poly, ulong a, ulong e, ulong q)

*******************************************************************************

    Greatest common divisor

*******************************************************************************

void fmpz_spoly_xgcd(fmpz_spoly_t r, 
    fmpz_spoly_t s, fmpz_spoly_t t,
    const fmpz_spoly_t poly1, const fmpz_spoly_t poly2)

void fmpz_spoly_gcd(fmpz_spoly_t res, 
    const fmpz_spoly_t poly1, const fmpz_spoly_t poly2)

void fmpz_spoly_lcm(fmpz_spoly_t res, 
    const fmpz_spoly_t poly1, const fmpz_spoly_t poly2)

*******************************************************************************

    Gaussian content

*******************************************************************************

void fmpz_spoly_content(fmpz_t res, const fmpz_spoly_t poly)

void fmpz_spoly_primitive_part(fmpz_spoly_t res, const fmpz_spoly_t poly)

*******************************************************************************

    Sparse interpolation

*******************************************************************************

void fmpz_spoly_bp_interp_init(fmpz_spoly_bp_interp_t res,
    slong terms, const fmpz_t height, const fmpz_t degree, flint_rand_t rs)

void fmpz_spoly_bp_interp_clear(fmpz_spoly_bp_interp_t res)

void fmpz_spoly_bp_interp_eval(fmpz_spoly_bp_interp_t res,
    const fmpz_spoly_t poly)

void fmpz_spoly_bp_interp_mul(fmpz_spoly_bp_interp_t res,
    const fmpz_spoly_t poly)

void fmpz_spoly_bp_interp_add(fmpz_spoly_bp_interp_t res,
    const fmpz_t c, const fmpz_spoly_t poly)

void fmpz_spoly_bp_interp_pow(fmpz_spoly_bp_interp_t res, ulong pow)

int fmpz_spoly_bp_interp(fmpz_spoly_t res,
    const fmpz_spoly_bp_interp_t evals)

void fmpz_spoly_sp_interp_init(fmpz_spoly_sp_interp_t res,
    slong terms, const fmpz_t height, const fmpz_t degree)

void fmpz_spoly_sp_interp_clear(fmpz_spoly_sp_interp_t res)

void fmpz_spoly_sp_interp_eval(fmpz_spoly_sp_interp_t res,
    const fmpz_spoly_t poly)

void fmpz_spoly_sp_interp_mul(fmpz_spoly_sp_interp_t res,
    const fmpz_spoly_t poly)

void fmpz_spoly_sp_interp_add(fmpz_spoly_sp_interp_t res,
    const fmpz_t c, const fmpz_spoly_t poly)

void fmpz_spoly_sp_interp_pow(fmpz_spoly_sp_interp_t res, ulong pow)

void fmpz_spoly_sp_interp(fmpz_spoly_t res,
    const fmpz_spoly_sp_interp_t evals)

slong _fmpz_spoly_prim_roots(fmpz_t p, fmpz * qq, fmpz * ww, flint_rand_t state,
    slong len, mp_bitcnt_t p_bits, mp_bitcnt_t q_prod_bits)

*******************************************************************************

    Divisibility testing

*******************************************************************************

int fmpz_spoly_divides(fmpz_spoly_t q, 
    const fmpz_spoly_t a, const fmpz_spoly_t b)

int fmpz_spoly_divides_dense(fmpz_spoly_t q, 
    const fmpz_spoly_t a, const fmpz_poly_t b)

*******************************************************************************

    Derivative

*******************************************************************************

void fmpz_spoly_derivative(fmpz_spoly_t res, const fmpz_spoly_t poly)

*******************************************************************************

    Evaluation

*******************************************************************************

void fmpz_spoly_evaluate(fmpz_t res,
    const fmpz_spoly_t f, const fmpz_t a)

void fmpz_spoly_evaluate_mod(fmpz_t res, const fmpz_spoly_t poly, 
    const fmpz_t a, const fmpz_t m)

ulong fmpz_spoly_evaluate_mod_ui(const fmpz_spoly_t poly, 
    ulong a, ulong m)

void fmpz_spoly_evaluate_powers(fmpz* res, slong len,
    const fmpz_spoly_t poly, const fmpz_t w, const fmpz_t p)

*******************************************************************************

    Composition

*******************************************************************************

void fmpz_spoly_compose(fmpz_spoly_t res,
    const fmpz_spoly_t poly1, const fmpz_spoly_t poly2)

void fmpz_spoly_compose_dense(fmpz_spoly_t res,
    const fmpz_poly_t poly1, const fmpz_spoly_t poly2)

*******************************************************************************

    Input and output

*******************************************************************************

int fmpz_spoly_fprint(FILE * file, const fmpz_spoly_t poly)

int fmpz_spoly_fprint_pretty(FILE * file, 
    const fmpz_spoly_t poly, const char *x)

int fmpz_spoly_print(const fmpz_spoly_t poly)

int fmpz_spoly_print_pretty(const fmpz_spoly_t poly, const char *x)

int fmpz_spoly_fread(FILE * file, fmpz_spoly_t poly)

int fmpz_spoly_fread_pretty(FILE * file,
    fmpz_spoly_t poly, char ** x)

int fmpz_spoly_read(fmpz_spoly_t poly)

int fmpz_spoly_read_pretty(fmpz_spoly_t poly, char ** x)

void fmpz_spoly_debug(const fmpz_spoly_t poly)

*******************************************************************************

    OTHER

*******************************************************************************

void fmpz_van_prime(fmpz_t res, flint_rand_t state, slong support, 
    mp_bitcnt_t deg_bits, double gamma)

void fmpz_diff_prime(fmpz_t res, flint_rand_t state, slong support, 
    mp_bitcnt_t deg_bits, double gamma)

slong fmpz_spoly_sumcheck(fmpz ** res, const fmpz_spoly_t poly1, 
    const fmpz_spoly_t poly2)

slong fmpz_spoly_sumset(fmpz ** res, flint_rand_t state, const 
    fmpz_spoly_t poly1, const fmpz_spoly_t poly2)

void _fmpz_mod_poly_powmod_x_2exp(fmpz* res,
    const fmpz* poly, slong len, ulong k, const fmpz_t p)

slong _fmpz_mod_poly_binary_roots(fmpz* roots, fmpz* expons,
    const fmpz* poly, slong len, const fmpz_t theta, slong k, const fmpz_t p)

void _fmpz_mod_poly_build_roots(fmpz_mod_poly_t res, 
    const fmpz * roots, slong len)

void _fmpz_spoly_transp_vandermonde_precomp(fmpz* bb, slong blen,
    const fmpz* vv_inv, fmpz_poly_struct * const * tree, const fmpz* tree_root,
    const fmpz* xx, slong len, const fmpz_t p)

void _fmpz_spoly_transp_vandermonde(fmpz* bb, slong blen,
    const fmpz* vv, const fmpz* xx, slong len, const fmpz_t p)

void _fmpz_spoly_transp_vandermonde_inv_precomp(fmpz* xx,
    fmpz_poly_struct * const * tree, const fmpz* tree_root,
    const fmpz* bb, slong len, const fmpz_t p)

void _fmpz_spoly_transp_vandermonde_inv(fmpz* xx,
    const fmpz* vv, const fmpz* bb, slong len, const fmpz_t p)
